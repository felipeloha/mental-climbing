{"version":3,"sources":["ClimbMap/ClimbMap.js","App.js","serviceWorker.js","index.js"],"names":["request","require","JSONStream","token","styles","MapBox","ReactMapboxGl","accessToken","zoom","center","mapStyleDefault","width","height","left","ClimbMap","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mapContainer","lat","lng","markers","Map","updateRoute","bind","assertThisInitialized","updateRoutes","route","markerID","longitude","latitude","marker","get","routes","filter","r","id","length","push","set","setState","_this2","map","url","console","log","on","err","pipe","parse","react_default","a","createElement","style","light","containerStyle","lib_esm","coordinates","Array","from","_ref","index","_ref2","slicedToArray","Component","App","className","ClimbMap_ClimbMap_ClimbMap","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kxBAUIA,EAAUC,EAAQ,KACpBC,EAAaD,EAAQ,OAKnBA,EAAQ,KAFVE,UACAC,WAGIC,EAASC,YAAc,CACzBC,YAAaJ,IAEfK,EAAO,CAAC,GACRC,EAAS,CAAC,UAAW,WACrBC,EAAkB,CAChBC,MAAO,OACPC,OAAQ,OACRC,KAAM,GAGWC,cACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,aAAc,CACZd,OAAQ,CACNe,IAAKf,EAAO,GACZgB,IAAKhB,EAAO,KAGhBiB,QAAS,IAAIC,KAEfZ,EAAKa,YAAcb,EAAKa,YAAYC,KAAjBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACnBA,EAAKgB,aAAehB,EAAKgB,aAAaF,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAZRA,2EAgBFiB,GACV,IAAIN,EAAUR,KAAKI,MAAMI,QAIrBO,EAAWD,EAAME,UAAY,IAAMF,EAAMG,SACzCC,EAASV,EAAQW,IAAIJ,GAGrBG,GACsD,IAAxDA,EAAOE,OAAOC,OAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOT,EAAMS,KAAIC,OAE7CN,EAAOE,OAAOK,KAAKX,GAETI,KACVA,EAAS,CACPZ,IAAKQ,EAAMG,SACXV,IAAKO,EAAME,UACXI,OAAQ,KAGHA,OAAS,CAACN,GACjBN,EAAQkB,IAAIX,EAAUG,IAQxBlB,KAAK2B,SAAS,CACZnB,QAASA,2CAIE,IAAAoB,EAAA5B,KACT6B,EAAM7B,KAAKI,MAAMC,aAEjByB,EAAM,mEACCD,EAAItC,OAAOe,IAAM,QACjBuB,EAAItC,OAAOgB,IAAM,mEAG5BwB,QAAQC,IAAI,YAAaF,GAGzBhD,EAAQqC,IAAIW,GACTG,GAAG,QAAS,SAASC,GACpBH,QAAQC,IAAI,yBAA0BE,KAEvCC,KAAKnD,EAAWoD,MAAM,aACtBH,GAAG,OAAQ,SAACnB,GAAD,OAAWc,EAAKlB,YAAYI,kDAI1Cd,KAAKa,gDAKL,OACEwB,EAAAC,EAAAC,cAACpD,EAAD,CACEqD,MAAStD,EAAOuD,MAChBnD,KAAQA,EACRoD,eAAkBlD,EAClBD,OAAUA,GACR8C,EAAAC,EAAAC,cAACI,EAAA,EAAD,MACAN,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,YAAarD,GACT8C,EAAAC,EAAAC,cAAA,uBAAehD,IAE1BsD,MAAMC,KAAK9C,KAAKI,MAAMI,SAASqB,IAAI,SAAAkB,EAAeC,GAAU,IAAAC,EAAAnD,OAAAoD,EAAA,EAAApD,CAAAiD,EAAA,GAAvBxB,EAAuB0B,EAAA,GAAnB/B,EAAmB+B,EAAA,GAC3D,OAAOZ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACGC,YAAa,CAAC1B,EAAOX,IAAKW,EAAOZ,MAC/B+B,EAAAC,EAAAC,cAAA,oBAAYS,EAAZ,IAAoBzB,cA1FN4B,aCdvBC,mLARX,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAACe,EAAD,cAJUH,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba7cd548.chunk.js","sourcesContent":["import React, {\n  Component\n} from 'react';\nimport './ClimbMap.css'\nimport ReactMapboxGl, {\n  ZoomControl,\n  Marker\n} from \"react-mapbox-gl\";\n\n\nvar request = require('request'),\n  JSONStream = require('JSONStream');\n\nconst {\n  token,\n  styles\n} = require('./config.json');\n\nconst MapBox = ReactMapboxGl({\n    accessToken: token\n  }),\n  zoom = [5],\n  center = [13.404954, 52.520008],\n  mapStyleDefault = {\n    width: '100%',\n    height: '100%',\n    left: 0\n  };\n\nexport default class ClimbMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mapContainer: {\n        center: {\n          lat: center[1],\n          lng: center[0]\n        }\n      },\n      markers: new Map()\n    };\n    this.updateRoute = this.updateRoute.bind(this);\n    this.updateRoutes = this.updateRoutes.bind(this);\n  }\n\n//TODO: create pop ups\n  updateRoute(route) {\n    var markers = this.state.markers;\n    //console.log(this.state);\n    //console.log(this.state.markers);\n    //console.log(\"processing route: \", route);\n    var markerID = route.longitude + '-' + route.latitude;\n    var marker = markers.get(markerID);\n\n    //if there is a marker but no route\n    if (marker &&\n      marker.routes.filter(r => r.id === route.id).length === 0) {\n      //console.log(\"marker found updating popup: \", markerID)\n      marker.routes.push(route);\n      //createPopUp(marker);\n    } else if (!marker) { //if there is no marker\n      marker = {\n        lat: route.latitude,\n        lng: route.longitude,\n        routes: []\n      }\n\n      marker.routes = [route];\n      markers.set(markerID, marker);\n      //createPopUp(marker);\n      //console.log(\"new marker: \", markerID)\n      /*marker = new mapboxgl.Marker()\n        .setLngLat([route.longitude, route.latitude])\n        .addTo(this.map);*/\n    }\n\n    this.setState({\n      markers: markers\n    });\n  }\n\n  updateRoutes() {\n    var map = this.state.mapContainer;\n    //var markers = this.state.markers;\n    var url = 'https://www.mountainproject.com/data/get-routes-for-lat-lon?' +\n      'lat=' + map.center.lat + '&' +\n      'lon=' + map.center.lng + '&' +\n      'maxDistance=' + 1000 + '&' +\n      'key=200372954-0078fe17d58508600a5f342877aa43f3';\n    console.log(\"get url: \", url);\n\n    //get routes and draw markers\n    request.get(url)\n      .on('error', function(err) {\n        console.log('Error getting routes: ', err);\n      })\n      .pipe(JSONStream.parse('routes.*'))\n      .on('data', (route) => this.updateRoute(route));\n  }\n\n  componentWillMount() {\n    this.updateRoutes();\n  }\n\n//TODO: update map on zoom\n  render() {\n    return (\n      <MapBox\n        style = {styles.light}\n        zoom = {zoom}\n        containerStyle = {mapStyleDefault}\n        center = {center} >\n          <ZoomControl/>\n          <Marker coordinates={center}>\n                      <div>MyCenter-{center}</div>\n                  </Marker>\n          {Array.from(this.state.markers).map(([id, marker], index) => {\n            return <Marker\n                      coordinates={[marker.lng, marker.lat]}>\n                        <div>Route-{index}:{id}</div>\n                    </Marker>\n          })}\n      </MapBox>\n    )\n  }\n\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport ClimbMap from './ClimbMap/ClimbMap'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ClimbMap />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}